generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL")
    directUrl         = env("POSTGRES_URL_NON_POOLING")
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id         String    @id @default(uuid())
    email      String    @unique
    name       String
    avatar_url String?
    created_at DateTime  @default(now())
    accounts   Account[]
    ratings    Rating[]
    sessions   Session[]

    @@map("users")
}

model Book {
    id          String              @id @default(uuid())
    name        String
    author      String
    summary     String              @db.VarChar(500)
    cover_url   String
    total_pages Int
    created_at  DateTime            @default(now())
    categories  CategoriesOnBooks[]
    ratings     Rating[]

    @@map("books")
}

model Category {
    id    String              @id @default(uuid())
    name  String              @unique
    books CategoriesOnBooks[]

    @@map("categories")
}

model CategoriesOnBooks {
    book_id    String
    categoryId String
    book       Book     @relation(fields: [book_id], references: [id])
    category   Category @relation(fields: [categoryId], references: [id])

    @@id([book_id, categoryId])
    @@index([book_id])
    @@index([categoryId])
}

model Rating {
    id          String   @id @default(uuid())
    rate        Int
    description String   @db.VarChar(500)
    created_at  DateTime @default(now())
    book_id     String
    user_id     String
    book        Book     @relation(fields: [book_id], references: [id])
    user        User     @relation(fields: [user_id], references: [id])

    @@index([book_id])
    @@index([user_id])
    @@map("ratings")
}

model Account {
    id                  String  @id @default(cuid())
    user_id             String
    type                String
    provider            String
    provider_account_id String
    refresh_token       String?
    access_token        String?
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String?
    session_state       String?
    user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([provider, provider_account_id])
    @@index([user_id])
    @@map("accounts")
}

model Session {
    id            String   @id @default(cuid())
    session_token String   @unique
    user_id       String
    expires       DateTime
    user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id])
    @@map("sessions")
}
